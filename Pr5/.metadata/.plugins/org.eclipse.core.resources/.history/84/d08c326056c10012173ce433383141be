package tp.pr5.gui;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.LayoutManager;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.TitledBorder;

import tp.pr5.Direction;
import tp.pr5.NavigationObserver;
import tp.pr5.Place;
import tp.pr5.PlaceInfo;

/**
 * @author Carmen Acosta Morales y Nerea Ramirez Lamela
 * Esta clase está a cargo del panel que muestra la información del encabezado del robot y la ciudad que está atravesando. 
 * Contiene la cuadrícula que representa a la ciudad en la interfaz Swing, un área de texto para mostrar las descripciones de lugar, 
 * y una etiqueta con un icono que representa el título robot. La cuadrícula 11x11 contiene objetos PlaceCell y el primer lugar comienza
 * a (5,5). Este panel se actualizará los lugares visitados cuando el robot se mueve de un lugar a otro. Además se mostrará la 
 * descripción lugar en un área de texto si el usuario hace clic en un lugar visitado.
 *
 */
public class NavigationPanel extends javax.swing.JPanel implements NavigationObserver {
	private final int F = 11;
	private final int C = 11;
	private final int FILINI = 5;
	private final int COLINI = 5;
	
	private JLabel walle;
	private JTextArea texto;
	private PlaceCell [][] places ;
	private JPanel placesPanel;
	private JPanel scrollPanel;
	private JScrollPane scroll;
	private int filas = FILINI;
	private int colum = COLINI;
	private Place lugar;
	
	public NavigationPanel(){
		this.places = new PlaceCell[F][C];
		this.placesPanel = new JPanel();
		this.filas = FILINI;
		this.colum = COLINI;
		//this.lugar = new Place();
		this.initNavigPanel();
		
	}
	
	public void initNavigPanel(){
		this.walle = new JLabel();
		
		this.walle.setName( "walle");
		this.walle.setIcon(new ImageIcon (getClass().getResource("images/walleNorth.png")));
		
		this.setLayout(new BorderLayout());
		
		//Creo el panel de ciudad y el de log
		panelScroll();
		this.panelPlaces();
		
		
		//Añado la etiqueta de walle
		this.add(this.walle,BorderLayout.WEST);
		//Añado la matriz de la ciudad
		this.add(this.placesPanel,BorderLayout.CENTER);
		//Añado el panel del log
		this.add(scrollPanel,BorderLayout.SOUTH);

	}
	
	public void panelPlaces (){
		//Hago un gridLayout de 11x11 para el mapa
        LayoutManager thisLayout = new GridLayout(11,11);
        this.placesPanel.setLayout(thisLayout);

        //Inicializo los botones de los lugares y los meto en su respectivo panel
		for ( int i = 0; i < F; i++){
			for ( int j = 0; j < C; j++){
				if ( i == FILINI && j == COLINI){
					this.places[i][j] = new PlaceCell(lugar);
					this.places [i][j].setName("placeCell");
					
					this.places[i][j].setActual(true);
					this.places[i][j].setVisitado(true);
					this.places[i][j].color();
					this.placesPanel.add (places[i][j]);
					
				}
				else{
					this.places[i][j] = new PlaceCell();
					this.places [i][j].setName("placeCell");
					this.placesPanel.add (places[i][j]);
				}
			}
		}
        //Fijo las dimensiones que quiero que tenga y le doy título al panel
        this.setPreferredSize(new java.awt.Dimension (900, 400));
        this.placesPanel.setBorder( new TitledBorder ("City Map"));
        

	}
	
	public void panelScroll(){
		//Inicializaciones de los atributos usados en este panel
		this.scrollPanel = new JPanel ();
		this.scroll = new JScrollPane();
    	this.scrollPanel = new JPanel();
    	
    	
    	this.scrollPanel.setBorder(new TitledBorder("Log"));
        this.scrollPanel.setName("Navigation");
        
        //Editamos la parte gráfica del log
		this.texto = new JTextArea(5, 30);
		this.texto.setEditable(false);
		this.texto.setName("texto");
		this.scroll = new JScrollPane(texto);
		
		//Hacemos que siempre sean visibles los scroll
		this.scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		this.scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
	
		this.scrollPanel.add(this.scroll);
		
        LayoutManager thisLayout = new GridLayout();
        this.scrollPanel.setLayout(thisLayout);
		
	}
	
	@Override
	public void headingChanged(Direction newHeading) {
		// TODO Auto-generated method stub
		if (newHeading == Direction.NORTH){
			this.walle.setIcon(new ImageIcon (getClass().getResource("images/walleNorth.png")));
		}
		else if (newHeading == Direction.SOUTH){
			this.walle.setIcon(new ImageIcon (getClass().getResource("images/walleSouth.png")));
		}
		else if (newHeading == Direction.EAST){
			this.walle.setIcon(new ImageIcon (getClass().getResource("images/walleEast.png")));
		}
		else if (newHeading == Direction.WEST){
			this.walle.setIcon(new ImageIcon (getClass().getResource("images/walleWest.png")));
		} 
		else this.walle.setName("walle");
		

	}

	@Override
	public void initNavigationModule(PlaceInfo initialPlace, Direction heading) {
		// TODO Auto-generated method stub
		this.lugar = (Place) initialPlace;
	
		this.places[5][5] = new PlaceCell(lugar);
		/*this.places [5][5].setName("placeCell");
		this.places[5][5].setText((String)this.lugar.getName());
		this.places[5][5].setActual(true);
		this.places[5][5].setVisitado(true);*/
	}

	@Override
	public void robotArrivesAtPlace(Direction heading, PlaceInfo place) {
		// TODO Auto-generated method stub
	//	this.places[filas][colum].setBackground(Color.lightGray);
		this.places[filas][colum].setActual(false);
		if (heading == Direction.NORTH){
			this.filas -= 1;
		}
		else if (heading == Direction.SOUTH){
			this.filas += 1;
		}
		else if (heading == Direction.EAST){
			this.colum += 1;
		}
		else if (heading == Direction.WEST){
			this.colum -= 1;
		} 
		this.places[filas][colum].setActual(true);
		this.places[filas][colum].setVisitado(true);
		this.places[filas][colum].color();
		placeScanned (place);
	}

	@Override
	public void placeScanned(PlaceInfo placeDescription) {
		// TODO Auto-generated method stub
		
		///////////////////CAMBIAR!///////////////////
		this.texto.setText(placeDescription.getName()+ placeDescription.getDescription());
	
	}

	@Override
	public void placeHasChanged(PlaceInfo placeDescription) {
		// TODO Auto-generated method stub
		
	}

}

package tp.pr5.instructions;


import tp.pr5.NavigationModule;
import tp.pr5.RobotEngine;
import tp.pr5.instructions.exceptions.InstructionExecutionException;
import tp.pr5.instructions.exceptions.WrongInstructionFormatException;
import tp.pr5.items.Item;
import tp.pr5.items.ItemContainer;

/**
 * @author Carmen Acosta Morales y Nerea Ramirez Lamela
 * Esta clase se encarga de depositar un objeto del inventario del robot en el lugar en el que el robot se encuentra.
 * Configura el contexto segun el inventario del robot asï¿½ como de las condiciones del lugar, no pudiendo soltar un 
 * objeto en un lugar en el que ya exista dicho objeto y saltando una excepciï¿½n de tipo InstructionExecutionException en caso de intentarlo.
 * Parsea una cadena para saber si esta hace referencia a una instrucciï¿½n de tipo Drop, sino lanza una excepciï¿½n del tipo
 * WrongInstructionFormatException. Si la cadena es correcta ( "Drop <id>" o "Soltar <id>" ) devuelve una DropInstruction.
 * Ignora mayï¿½sculas y minï¿½sculas a la hora de parsear la cadena. 
 * Si alguno de los atributos es nulo y se intenta acceder a ï¿½l salta una excepcion del tipo NullPointerException. 
 * Tiene tres atributos, navega, que contiene la informacion del entorno del robot,
 * container que contiene los Items que contiene el robot en su invenatrio e id, que es la id del item a soltar.
 * El mï¿½todo getHelp te indica los parï¿½metros que se aceptan como validos para esta instrucciï¿½n.
 *
 */
public class DropInstruction implements Instruction {
	private NavigationModule navega;
	private ItemContainer container;
	private RobotEngine robot;
	private String id;
	/**
	 * Constructora por defecto que crea un navigationModule, ItemContainer y un RobotEngine.
	 */
	public DropInstruction (){
		this.navega = new NavigationModule ();
		this.container = new ItemContainer ();
		this.robot = new RobotEngine();
		this.id = "";
	}
	/**
	 * Analiza la cadena que tiene que devolver una instancia de DropInstruction, si no es así lanza una excepción de
	 * WrongInstructionFormatException() 
	 */
	@Override
	public Instruction parse(String cad) 
			throws WrongInstructionFormatException {
		// TODO Auto-generated method stub
		String [] cadena = cad.split(" ");/*Divide la cadena en espacios
		y guarda cada fragmento en cada posiciï¿½n del array*/
		
		if ( cadena.length != 2){
			throw new WrongInstructionFormatException();
		}
		else if (!cadena [0].equalsIgnoreCase("DROP") && !cadena [0].equalsIgnoreCase("SOLTAR")){
			throw new WrongInstructionFormatException();
		}
		else{
			this.id = cadena[1];
			return this;
		}
	}
	/**
	 * Devuelve la sintaxis de la instrucción.
	 */
	@Override
	public String getHelp() {
		// TODO Auto-generated method stub
		return " DROP|SOLTAR <id>";
	}
	/**
	 * Modifica la configuración del contexto.
	 * El método recibe el robot engine, 
	 * navigation (la información sobre el juego, los lugares y la direccion actual y el contenedor del robot.
	 */
	@Override
	public void configureContext(RobotEngine engine,
			NavigationModule navigation, ItemContainer robotContainer) {
		// TODO Auto-generated method stub
		this.navega = navigation;
		this.container = robotContainer;
		this.robot = engine;
	}
	/**
	 * Se encarga de soltar un elemento del inventario (si existe) en el lugar donde se encuentra en robot y guardarlo en el inventario del lugar.
	 *Si el contenedor de items del robot contiene el item con el id dado, 
	 *entonces se busca en el inventario del lugar donde está el robot. 
	 *Si no se encuentra en el lugar se coge del inventario y se suelta en el lugar.
	 *Se lanza un mensaje que tiene que decir el robot.
	 *Si el contenedor de items del robot no contiene el item o si el inventario del lugar lo contiene  se lanza una excepción.
	 */
	@Override
	public void execute() 
			throws InstructionExecutionException {
		// TODO Auto-generated method stub
		Item it = null;

		if(this.container.containsItem(this.id)){
			if ( !navega.findItemAtCurrentPlace (this.id)){
				it = this.container.getItem(this.id);
				this.container.pickItem(id);
				this.navega.dropItemAtCurrentPlace(it);
				this.robot.saySomething("WALL·E says: Great! I have dropped " + this.id);
			}else
			{
				throw new InstructionExecutionException();
			}
		}
		else
		{
			throw new InstructionExecutionException("You do not have any " + this.id + ".");
		}
	}

}

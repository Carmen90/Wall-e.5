package tp.pr5;

import tp.pr5.items.CodeCard;

/**
 * Street lo que hace es conectar dos lugares A y B en una dirección.
 * La calle es de doble dirección, si la calle está definida como Street(A.NORTH,B) significa que desde A se puede acceder a B con direccion NORTH pero B también puede acceder a A con dirección SOUTH.
 * Atributos de la clase:Tiene dos Place que son el lugar de origen y el de destino; una dirección; Un boolean que nos dirá si la calle está abierta o cerrada; Un String code que hace referencia al código de la tarjeta que abre/cierra la calle;y por último un String id.
 * Se encarga de abrir y cerrar la calle si se tiene la tarjeta con el código correcto, comprobar si la calle es la que corresponde con el lugar y la dirección dada(método comeOutFrom(Place place, Direction dir)), ver si un lugar se conecta con otro ( nextPlace(Place whereAmI))
 * @author Carmen Acosta Morales y Nerea Ramirez Lamela 
 *
 */
public class Street {
	private Place source;
	private Place target;
	private Direction direction;
	private boolean isOpen;
	private java.lang.String code;
	private String id;
	
	////////// PENDIENTE DE MIRAR, NECESARIO EN CITYLOADER///////////
	public Street(){
		this.direction = Direction.UNKNOWN;
		this.id = "";
		this.target = new Place();
		this.source = new Place();
		this.isOpen = true;
	}
	/**
	 * Street constructor
	 * @param source source place
	 * @param direction	direction looking at
	 * @param target target place
	 */ 
	public Street(Place source,Direction direction,Place target){
		this.id = "";
		this.source = source;
		this.target = target;
		this.direction = direction;
		this.isOpen = true;
	}
	/**
	 * Street constructor
	 * @param source place
	 * @param direction looking at
	 * @param target place
	 * @param isOpen true if the street is open
	 * @param code code that open that closed street
	 */
	public Street(Place source, Direction direction, Place target,boolean isOpen,java.lang.String code){
		this.direction = direction;
		this.target = target;
		this.source = source;
		this.isOpen = isOpen;
		this.code = code;
		
	}
	/**
	 * Comprueba si la calle sale del lugar y de la dirección dados.La calle es de doble sentido,asi que habrá que mirar si la dirección y lugar  de origen de nuestra calle es igual a dir y al lugar que nos dan o a la dirección opuesta y al lugar de destino de la calle.
	 * @param place
	 * @param whichDirection
	 * @return Si son iguales alguna de esas comparaciones devolverá true,sino devolverá false.
	 */
	public boolean comeOutFrom(Place place, Direction whichDirection){
		return ( whichDirection == whichDirection.dirOpuesta(this.direction) && place == this.target) || ( whichDirection == this.direction && place == this.source );
	}
	
	/**
	 * Devuelve el siguiente lugar al dado.No se considera si está abierto o no.Dependiendo de si se da el de origen o el destino se devuelve uno u otro. Si no 
	 * @param whereAmI - El lugar donde estoy.
	 * @return Devuelve el lugar del otro lado de la calle, aunque este cerrado.Devuelve null si whereAmI no pertenece a la calle.
	 */
	public Place nextPlace(Place whereAmI){
	Place place = null;
		
		if ( whereAmI == this.source ){
			
			place = this.target;
		}
		else if ( whereAmI == this.target ){
			place = this.source;
		}
		else {
			place = null;
		}
		return place;
	}
	/**
	 * Comprueba si la calle está abierta
	 * @return true si está abierta, sino false.
	 */
	public boolean isOpen(){		
		return isOpen;
	}
	/**
	 * Intenta abrir la calle con un CodeCard
	 * El código debe coincidir con el de la calle para completar la acción.
	 * @param card
	 * @return true si consigue abrir la calle.Si no devuelve false.
	 */
	public boolean open(CodeCard card){
		if(this.code == card.getCode()){
			this.isOpen = true;
		}
		return this.code == card.getCode();
	}
	/**
	 * Intenta cerrar la calle con un CodeCard
	 * El código debe coincidir con el de la calle para completar la acción.
	 * @param card
	 * @return true si consigue cerrarla. Si no devuelve false.
	 */
	public boolean close(CodeCard card){
		if(this.code==card.getCode()){
			this.isOpen=false;
		}
		return this.code==card.getCode();
	}
	
	//////////////MIRAR, SOLO PARA QU EFUNCIONE CITY LOADER, EN PRINCIPIO///////////
	public String getId() {
		return id;
	}
	
	////////////////MIRAR, PARA QUE FUNCIONE EL CODECARD////////////////
	public String getCode() {
		// TODO Auto-generated method stub
		return this.code;
	}
	
}
